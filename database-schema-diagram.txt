# You Hungry? Database Schema Diagram
# MongoDB Collections and Relationships

┌─────────────────────────────────────────────────────────────────────────────────┐
│                               DATABASE SCHEMA OVERVIEW                          │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────┐    1:N    ┌─────────────────┐
│     USERS       │◄─────────►│   COLLECTIONS   │
│                 │           │                 │
│ • _id (PK)      │           │ • _id (PK)      │
│ • clerkId (UK)  │           │ • name          │
│ • email (UK)    │           │ • description   │
│ • name          │           │ • type          │
│ • city          │           │ • ownerId (FK)  │
│ • profilePicture│           │ • restaurantIds │
│ • smsOptIn      │           │ • createdAt     │
│ • smsPhoneNumber│           │ • updatedAt     │
│ • preferences   │           │                 │
│ • createdAt     │           └─────────────────┘
│ • updatedAt     │                     │
└─────────────────┘                     │
         │                              │ N:M
         │ 1:N                          ▼
         │                     ┌─────────────────┐
         │                     │   RESTAURANTS   │
         │                     │                 │
         │                     │ • _id (PK)      │
         │                     │ • googlePlaceId │
         │                     │ • name          │
         │                     │ • address       │
         │                     │ • coordinates   │
         │                     │ • cuisine       │
         │                     │ • rating        │
         │                     │ • priceRange    │
         │                     │ • timeToPickUp  │
         │                     │ • photos        │
         │                     │ • phoneNumber   │
         │                     │ • website       │
         │                     │ • hours         │
         │                     │ • cachedAt      │
         │                     │ • lastUpdated   │
         │                     │                 │
         │                     └─────────────────┘
         │                              │
         │ N:M                          │ 1:N
         ▼                              ▼
┌─────────────────┐              ┌─────────────────┐
│     GROUPS      │              │    DECISIONS    │
│                 │              │                 │
│ • _id (PK)      │              │ • _id (PK)      │
│ • name          │              │ • type          │
│ • description   │              │ • collectionId  │
│ • adminIds      │              │ • groupId (FK)  │
│ • memberIds     │              │ • participants  │
│ • collectionIds │              │ • method*       │
│ • createdAt     │              │ • status        │
│ • updatedAt     │              │ • deadline      │
│                 │              │ • visitDate     │
└─────────────────┘              │ • result        │
         │                       │ • votes         │
         │ 1:N                   │ • createdAt     │
         ▼                       │ • updatedAt     │
┌─────────────────┐              │                 │
│   COLLECTIONS   │              └─────────────────┘
│   (Group owned) │                       │
│                 │                       │ N:M
│ Same fields as  │                       ▼
│ personal        │              ┌─────────────────┐
│ collections     │              │     USERS       │
│ but type="group"│              │  (Participants) │
└─────────────────┘              └─────────────────┘
         │
         │ N:M
         ▼
┌─────────────────┐
│   RESTAURANTS   │
│ (Same as above) │
└─────────────────┘


┌─────────────────────────────────────────────────────────────────────────────────┐
│                          FRIENDSHIP & INVITATION RELATIONSHIPS                 │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────┐    1:N    ┌─────────────────┐    1:N    ┌─────────────────┐
│     USERS       │◄─────────►│   FRIENDSHIPS   │◄─────────►│     USERS       │
│                 │           │                 │           │                 │
│ • _id (PK)      │           │ • _id (PK)      │           │ • _id (PK)      │
│ • clerkId (UK)  │           │ • requesterId   │           │ • clerkId (UK)  │
│ • email (UK)    │           │ • addresseeId   │           │ • email (UK)    │
│ • name          │           │ • status        │           │ • name          │
│ • city          │           │ • createdAt     │           │ • city          │
│ • profilePicture│           │ • updatedAt     │           │ • profilePicture│
│ • smsOptIn      │           │                 │           │ • smsOptIn      │
│ • smsPhoneNumber│           │                 │           │ • smsPhoneNumber│
│ • preferences   │           │                 │           │ • preferences   │
│ • createdAt     │           │                 │           │ • createdAt     │
│ • updatedAt     │           │                 │           │ • updatedAt     │
│                 │           │                 │           │                 │
└─────────────────┘           └─────────────────┘           └─────────────────┘
    (Requester)                    (Friendship)                (Addressee)


┌─────────────────┐    1:N    ┌──────────────────┐    1:N    ┌─────────────────┐
│     GROUPS      │◄─────────►│ GROUP_INVITATIONS│◄─────────►│     USERS       │
│                 │           │                  │           │                 │
│ • _id (PK)      │           │ • _id (PK)       │           │ • _id (PK)      │
│ • name          │           │ • groupId (FK)   │           │ • clerkId (UK)  │
│ • description   │           │ • inviterId (FK) │           │ • email (UK)    │
│ • adminIds      │           │ • inviteeId (FK) │           │ • name          │
│ • memberIds     │           │ • status         │           │ • city          │
│ • collectionIds │           │   - pending      │           │ • createdAt     │
│ • createdAt     │           │   - accepted     │           │ • updatedAt     │
│ • updatedAt     │           │   - declined     │           │                 │
│                 │           │ • createdAt      │           │                 │
└─────────────────┘           │ • updatedAt      │           └─────────────────┘
     (Group)                  │                  │               (Invitee)
                              └──────────────────┘
                                      │
                                      │ 1:N
                                      ▼
                              ┌─────────────────┐
                              │     USERS       │
                              │   (Inviter)     │
                              └─────────────────┘


┌─────────────────────────────────────────────────────────────────────────────────┐
│                               RELATIONSHIP SUMMARY                             │
└─────────────────────────────────────────────────────────────────────────────────┘

1. USERS ↔ COLLECTIONS (1:N)
   - Personal collections owned by users
   - One user can have many personal collections

2. GROUPS ↔ COLLECTIONS (1:N) 
   - Group collections owned by groups
   - One group can have many collections

3. COLLECTIONS ↔ RESTAURANTS (N:M)
   - Collections contain multiple restaurants
   - Restaurants can be in multiple collections

4. GROUPS ↔ USERS (N:M)
   - Groups have multiple members and admins
   - Users can belong to multiple groups

5. DECISIONS ↔ COLLECTIONS (N:1)
   - Decisions are made on specific collections
   - Multiple decisions can be made on one collection

6. DECISIONS ↔ GROUPS (N:1)
   - Group decisions belong to specific groups
   - Multiple decisions can belong to one group

7. DECISIONS ↔ USERS (N:M)
   - Decisions have multiple participants
   - Users can participate in multiple decisions

8. DECISIONS ↔ RESTAURANTS (N:1)
   - Completed decisions result in one selected restaurant
   - Multiple decisions can select the same restaurant
   - Decision method field: 'tiered' (voting), 'random' (weighted), 'manual' (user-entered)

9. FRIENDSHIPS ↔ USERS (N:1 each direction)
   - Friendships connect two users (requester and addressee)
   - Bidirectional relationship stored as single document

10. GROUP_INVITATIONS ↔ GROUPS (N:1)
   - Group invitations belong to specific groups
   - Multiple invitations can be sent for one group

11. GROUP_INVITATIONS ↔ USERS (N:1 for inviter, N:1 for invitee)
   - Invitations connect inviter (group member) and invitee (user being invited)
   - Tracks invitation status (pending, accepted, declined)


┌─────────────────────────────────────────────────────────────────────────────────┐
│                                KEY INDEXES                                     │
└─────────────────────────────────────────────────────────────────────────────────┘

USERS:
- clerkId (unique)
- email (unique)

RESTAURANTS:
- googlePlaceId (unique)
- coordinates (2dsphere for geospatial queries)

FRIENDSHIPS:
- requesterId + addresseeId (compound)

DECISIONS:
- status + deadline (compound)
- method (for filtering by decision type: tiered/random/manual)
- type + visitDate (for history queries)

COLLECTIONS:
- ownerId + type (compound)

GROUP_INVITATIONS:
- groupId + inviteeId (compound)
- status (for filtering pending invitations)
- inviteeId (for user's invitations lookup)

*DECISIONS.method Field Values:
  - 'tiered': Group voting with weighted rankings
  - 'random': Weighted random selection using 30-day rolling history
  - 'manual': User-entered past restaurant visit for history tracking

OFFLINE_STORAGE (IndexedDB):
- restaurants: lastUpdated
- collections: lastUpdated
- decisions: collectionId, status
- offlineActions: createdAt, retryCount


┌─────────────────────────────────────────────────────────────────────────────────┐
│                              DATA FLOW PATTERNS                                │
└─────────────────────────────────────────────────────────────────────────────────┘

Personal Decision Flow:
USER → COLLECTION → RESTAURANTS → DECISION → SELECTED_RESTAURANT

Group Decision Flow:
GROUP → MEMBERS → COLLECTION → RESTAURANTS → DECISION → PARTICIPANTS → SELECTED_RESTAURANT

Friendship Flow:
USER_A → FRIENDSHIP → USER_B

Collection Management:
USER/GROUP → COLLECTION → RESTAURANTS (from Google Places API)

Offline Sync Flow:
OFFLINE_ACTION → INDEXEDDB → ONLINE_DETECTION → BACKGROUND_SYNC → SERVER_API

Group Invitation Flow:
ADMIN → GROUP_INVITATION → USER → ACCEPT/DECLINE → GROUP_MEMBER

Friend Request Flow:
USER_A → FRIENDSHIP (pending) → USER_B → ACCEPT/DECLINE → FRIENDSHIP (accepted)


┌─────────────────────────────────────────────────────────────────────────────────┐
│                            OFFLINE STORAGE (IndexedDB)                         │
└─────────────────────────────────────────────────────────────────────────────────┘

Client-Side Offline Storage for PWA:

┌──────────────────┐
│ OFFLINE_STORAGE  │ (IndexedDB: YouHungryOfflineDB)
│                  │
│ Object Stores:   │
│                  │
│ 1. restaurants   │ • id (PK)
│                  │ • name, address, cuisine
│                  │ • rating, priceLevel, photos
│                  │ • lastUpdated
│                  │ Index: lastUpdated
│                  │
│ 2. collections   │ • id (PK)
│                  │ • name, description, type
│                  │ • ownerId, restaurantIds
│                  │ • lastUpdated
│                  │ Index: lastUpdated
│                  │
│ 3. decisions     │ • id (PK)
│                  │ • collectionId, groupId
│                  │ • status, result, votes
│                  │ • createdAt
│                  │ Index: collectionId, status
│                  │
│ 4. offlineActions│ • id (PK, autoIncrement)
│                  │ • type (vote, collection, decision)
│                  │ • url, method, headers, data
│                  │ • createdAt, retryCount, maxRetries
│                  │ Index: createdAt, retryCount
│                  │
└──────────────────┘

Purpose:
- Offline data caching for PWA functionality
- Background sync queue for offline actions
- Automatic cleanup of expired data (7 days default)
- Sync status tracking and retry logic


┌─────────────────────────────────────────────────────────────────────────────────┐
│                          TECHNOLOGY STACK SUMMARY                              │
└─────────────────────────────────────────────────────────────────────────────────┘

Database Layer:
- MongoDB Atlas (Primary Database)
- IndexedDB (Client-side Offline Storage for PWA)

Data Storage Types:
- Server-side: MongoDB (persistent, authoritative)
- Client-side: IndexedDB (offline cache, sync queue)
- Cache: Service Worker Cache API (static assets, API responses)

PWA Features:
- Service Workers for offline functionality
- Background sync for offline actions
- IndexedDB for offline data persistence
- Cache API for multi-tier caching strategy

Collections Added:
- GROUP_INVITATIONS (for group invitation management)
- Offline storage: restaurants, collections, decisions, offlineActions (IndexedDB)

Recent Schema Enhancements:
- Added GROUP_INVITATIONS collection with status tracking
- Implemented offline storage with IndexedDB for PWA support
- Added background sync queue with retry logic
- Enhanced caching with multi-tier strategy (static, dynamic, API)
